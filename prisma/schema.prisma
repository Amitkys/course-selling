// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["strictUndefinedChecks"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// learning: whatever is primary table, it will store array of child table


model EmailWithRoll{
  email String  @unique
  rollNumber String @unique
  @@unique([email, rollNumber])
  users User[]
}

model User {
  id         String    @id @default(uuid()) @db.Uuid
  email      String    @unique // Ensures email is unique for the relation
  name       String
  avatar     String
  isAdmin    Boolean   @default(false)       
  isSuperAdmin Boolean @default(false)
  emailWithRoll EmailWithRoll @relation(fields: [email], references: [email])
  opinions   Opinion[] 
  reactions  Reaction[] 
}

model Teacher {
  id   String @unique @id @default(uuid()) @db.Uuid
  name String 
  email String?
  branch String?
  createdAt DateTime @default(now())
  opinions Opinion[]
}


model Opinion {
  id           String    @id @default(uuid()) @db.Uuid
  teacher      Teacher   @relation(fields: [teacherId], references: [id])
  teacherId    String    @db.Uuid
  statement    String
  createdAt    DateTime  @default(now())
  author       User      @relation(fields: [authorId], references: [id])
  authorId     String    @db.Uuid
  reactions    Reaction[]
  likeCount    Int       @default(0) 
  dislikeCount Int       @default(0) 
}


model Reaction {
  id         String    @id @default(uuid()) @db.Uuid
  opinion    Opinion   @relation(fields: [opinionId], references: [id])
  opinionId  String    @db.Uuid
  // userId is reference from User table(foreign key)
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @db.Uuid
  likeStatus Boolean
  dislikeStatus Boolean
  createdAt  DateTime  @default(now())
// prevent the user for doing multple like and dislke on same Opinion(post) 
  @@unique([opinionId, userId]) 
}

enum ReactionType {
  LIKE
  DISLIKE
}
