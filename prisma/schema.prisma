// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["strictUndefinedChecks"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid()) @db.Uuid
  email      String    @unique
  name       String?
  avatar     String?
  rollNumber String?
  opinions   Opinion[] // A user can write many opinions
  reactions  Reaction[] // A user can react to many opinions
  isActive   Boolean   @default(false)
}

model Opinion {
  id           String    @id @default(uuid()) @db.Uuid
  teacher      String
  statement    String
  createdAt    DateTime  @default(now())
  author       User      @relation(fields: [authorId], references: [id])
  authorId     String    @db.Uuid
  reactions    Reaction[]
  likeCount    Int       @default(0) // Stores the count of likes
  dislikeCount Int       @default(0) // Stores the count of dislikes
}


model Reaction {
  id         String    @id @default(uuid()) @db.Uuid
  opinion    Opinion   @relation(fields: [opinionId], references: [id])
  opinionId  String    @db.Uuid
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @db.Uuid
  type       ReactionType
  createdAt  DateTime  @default(now())

  @@unique([opinionId, userId]) // Prevents a user from reacting to the same opinion multiple times
}

enum ReactionType {
  LIKE
  DISLIKE
}

